//express_demo.js 文件
var express = require('express');
var fs = require('fs');
var os = require('os');
var path = require('path');
var app = express();
var ServerURL = "https://www.uxiaowo.com/sirivis/action";
var request=require('request');  
var bodyParser = require('body-parser');
const shairplay_path = '/home/pi/.shairplay';
const childProcess = require('child_process');
const exec = childProcess.exec
const homebridgePath = os.homedir() + '/.homebridge';
const hbConfigPath = path.join(homebridgePath,"config.json");
const mivisPath = os.homedir() + '/.mivis';
const mivisConfigPath = path.join(mivisPath,"config");
const mivisConfigKey = "mivisConfig";
const mivisBroadlinkKey = "mivisConfigBroadlink";
var miDevManager = require('mivis-mi-dm');
var mivisStorage = require('node-persist').create();
mivisStorage.initSync({ dir: mivisConfigPath});
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
var HttpUtils = require('./HttpUtils');


var BroadlinkDM = require('mivis-broadlink-dm').BroadlinkDM;

const devUtil = require("./util/DevUtil");
const wifiUtil = require("./util/WifiUtil");
// mivisStorage.getItem("cachedDevices");
// mivisStorage.setItemSync("cachedDevices", this.devices);


// [INIT]启动，初始化过程

// [INIT - 1].初始化config文件
if(!fs.existsSync(homebridgePath)){ // 初始时没有~/.homebridge文件夹
  fs.mkdirSync(homebridgePath);
}
if(!fs.existsSync(hbConfigPath)){ // 没有config文件
  fs.writeFileSync(hbConfigPath,JSON.stringify({
    bridge:{
      name:"mivis",
      username:devUtil.getMac().toUpperCase(),
      port:55155,
      pin:'623-88-626'
    },
    description:"generated by mivis-center of YIHUIZHIJIA!",
    accessories:[],
    platforms:[
      {
        platform:"MiAqaraPlatform",
        gateways:{}
      }
    ]    
  }));
}

// 启动Airplay
// console.log(fs.existsSync(shairplay_path));
if(!fs.existsSync(shairplay_path)){
  exec("cd /home/pi/shairplay &&  shairplay -a 'mivis_"+devUtil.getIp()+"'",function(){})
}

app.use(express.static(path.join(__dirname,'static')));
app.use("*", function(request, response, next) {
  response.writeHead(200, { "Content-Type": "application/json;charset=utf-8" });
  next();
});
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));


var miDM = new miDevManager();
miDM.sendWhoisCommand();

var broadlinkDM = new BroadlinkDM();
broadlinkDM.discover(null); // 初始化时建立服务器连接

// 获取网关列表
// {"7c49eb82b2c6":{"sid":"7c49eb82b2c6","passwd":"none","ip":"192.168.1.33","port":"9898","proto_version":"2.0.1","model":"acpartner.v3","token":"RTMKh0pIuEhfviRX"},"7811dce1b453":{"sid":"7811dce1b453","passwd":"none","ip":"192.168.1.20","port":"9898","proto_version":"1.1.2","model":"gateway","token":"PwghPIvlpigGphUv"}}

function getMiGateway(){
  var gws = miDM.getAllGateways();
  var ret = [];
  for(var sid in gws){
    var gw = gws[sid];
    ret.push({mac: gw.sid,ip:gw.ip,type:'gw',model:gw.model});
  }
  return ret;
}

// 获取在线的rm列表
function getBroadlinkRM(){
  var rms = broadlinkDM.deviceInfo(); // [{}]
  var ret = [];
  for(var mac in rms){
    var rm = rms[mac];
    ret.push({mac: toMacStandard(rm.mac),host:rm.host.address,type:'rm'});
  }
  return ret;
}

// 获取网关的子设备
function getMiGatewaySubDevice(gwsid){
  var gws = miDM.getAllDevices(gwsid);
  var ret = [];
  for(var sid in gws){
    var gw = gws[sid];
    ret.push({mac: gw.sid,ip:gw.ip,type:'gw',model:gw.model});
  }
  return ret;
}

/**
 * 小米配置相关接口
 */

app.get('/miGatewayListRefresh', function (req, res) {
  miDM.sendWhoisCommand();
  res.end(JSON.stringify({success:true}));
});

 // 获取在线和手动添加的网关
 // in:
 // out: {"mac1":{},"mac2":{}}
 // 格式：mac:{type:[gw] online:[true|false] mac:[] ip:[] token:[]}
app.get('/miGatewayList', function (req, res) {
  var ret = {}; // 
  var scanList = getMiGateway();// 所有在线的
  var config = mivisStorage.getItem(mivisConfigKey) || {};
  if(config.addedDeviceMi){
    ret = config.addedDeviceMi;
  }
  for(var index in ret){ // 遍历本地文件
    ret[index].online = false;
  }
  for(var index in scanList){ // 遍历在线列表
    var onlineDev = scanList[index];
    var obj = ret[onlineDev.mac];
    if(obj){ // in add list {mac:}
       obj.online = true;
       obj.ip = onlineDev.ip;
       obj.model = onlineDev.model;
    }else{
      ret[onlineDev.mac] = {ip:onlineDev.ip,online:true,type:onlineDev.type,mac:onlineDev.mac}
    }
  }

  //
  var data = fs.readFileSync(hbConfigPath); // read
  var hbdev = [];
    var hbconfig = JSON.parse(data);
    var plats = hbconfig.platforms;
    for(var index in plats){
      if(plats[index].platform == 'MiAqaraPlatform'){
        for(var key in plats[index].gateways){
          hbdev.push(key);
        }
        break;
      }
  }

  res.end(JSON.stringify({"alldev":ret,"hbdev":hbdev}));
});


app.get('/broadlinkListRefresh', function (req, res) {
  broadlinkDM.discover(null);
  res.end(JSON.stringify({success:true}));
});

// 获取在线和手动添加的网关
 // in:
 // out: {"mac1":{},"mac2":{}}
 // 格式：mac:{type:[gw] online:[true|false] mac:[] ip:[] token:[]}
 app.get('/broadlinkList', function (req, res) {
  var ret = {}; // ret是所有的dev，scanList是在线的
  var scanList = getBroadlinkRM();// [{mac:'111111111111',host:'127.0.0.1',type:'rm'}];
  var config = mivisStorage.getItem(mivisBroadlinkKey) || {};
  if(config.addedDevice){
    ret = config.addedDevice;
  }
  for(var index in ret){ // 遍历本地文件，所有dev
    ret[index].online = false;
  }
  for(var index in scanList){ // 遍历在线列表
    var onlineDev = scanList[index];
    var obj = ret[onlineDev.mac];
    if(obj){ // in add list {mac:} 在本地
       obj.online = true;
       obj.ip = onlineDev.host;
       obj.type = "rm";
    }else{ // 不再本地,则添加进去
      ret[onlineDev.mac] = {ip:onlineDev.host,online:true,type:onlineDev.type,mac:onlineDev.mac}
    }
  }

  //
  var data = fs.readFileSync(hbConfigPath); // read
  var hbdev = [];
    var hbconfig = JSON.parse(data);
    var plats = hbconfig.platforms;
    for(var index in plats){
      if(plats[index].platform == 'BroadlinkRM'){
        console.log(">>>>"+ plats[index].host);
        hbdev.push(toMacStandard(plats[index].host));
      }
  }

  res.end(JSON.stringify({"alldev":ret,"hbdev":hbdev}));
});

function toMacStandard(mac){
  mac = mac.replace(/:/g,'');
  return mac.toLowerCase();
}

// 获取
app.post('/miSubDevices',bodyParser.text(),async function(req,res){
  var dev = req.body;//JSON.parse();
  var subDevs = getMiGatewaySubDevice(dev.mac);
  res.end(JSON.stringify({subDevs:subDevs}));
});

 // 手动添加网关
 // in: {mac:xxx,token:xxx,type:gw}
 // out:
app.post('/miGatewayAdd',bodyParser.text(),async function(req,res){
  var gw = req.body;//JSON.parse();
  var config = mivisStorage.getItem(mivisConfigKey) || {};
  var  addedDevice = config.addedDeviceMi;
  if(!addedDevice){
    addedDevice = config.addedDeviceMi = {};
  }
  gw.store = true;
  addedDevice[gw.mac] = gw;
  mivisStorage.setItemSync(mivisConfigKey, config);
  res.end(JSON.stringify({success:true}));
});

 // 添加到config文件
 // in: {"gw":[{mac:'m1',token:'t1'},{mac:'m2',token:'t2'}],"":{}}
 // out:
 app.post('/miSave2Hb',bodyParser.text(),async function(req,res){
  var input = req.body;//JSON.parse();
  var in_gw = input.gw;
  if(in_gw){
    var data = fs.readFileSync(hbConfigPath); // read
    var hbconfig = JSON.parse(data);
    var plats = hbconfig.platforms;
    for(var index in plats){
      if(plats[index].platform == 'MiAqaraPlatform'){
        plats[index].gateways = {};
        for(var in_index in in_gw){
          plats[index].gateways[in_gw[in_index]['mac']] = in_gw[in_index]['token'];
        }
        break;
      }
    }
    fs.writeFileSync(hbConfigPath,JSON.stringify(hbconfig));
  }
  res.end(JSON.stringify({success:true}));
});

// 删除网关
// in:{mac:xxx,token:xxx,type:gw}
app.post('/miGatewayRemove',bodyParser.text(),async function(req,res){
  var gw = req.body;//JSON.parse();
  var config = mivisStorage.getItem(mivisConfigKey) || {};
  var  addedDevice = config.addedDeviceMi || {};
  delete addedDevice[gw.mac];
  mivisStorage.setItemSync(mivisConfigKey, config);
  res.end(JSON.stringify({success:true}));
});

// 修改网关
// {mac:xxx,token:xxx,type:gw}
app.post('/miGatewayUpdate',bodyParser.text(),async function(req,res){
  var gw = req.body;//JSON.parse();
  var config = mivisStorage.getItem(mivisConfigKey) || {};
  var  addedDevice = config.addedDeviceMi;
  if(!addedDevice){
    addedDevice = config.addedDeviceMi = {};
  }
  if(!addedDevice[gw.mac]){
    addedDevice[gw.mac] = gw;
  }else{
    addedDevice[gw.mac].token = gw.token;
  }
  addedDevice[gw.mac].store = true;
  mivisStorage.setItemSync(mivisConfigKey, config);
  res.end(JSON.stringify({success:true}));
});

/*************************************************
 * 小米设备控制
 ************************************************/
// 打开网关灯
app.post('/openGWLight',bodyParser.text(),async function(req,res){
  var dev = req.body;//JSON.parse();
  miDM.gwControlLight(dev.mac,true,dev.token);
  res.end(JSON.stringify({success:true}));
});
// 关闭网关灯
app.post('/closeGWLight',bodyParser.text(),async function(req,res){
  var dev = req.body;//JSON.parse();
  miDM.gwControlLight(dev.mac,false,dev.token);
  res.end(JSON.stringify({success:true}));
});
// 添加设备
app.post('/joinDevice',bodyParser.text(),async function(req,res){
  var dev = req.body;//JSON.parse();
  miDM.joinDevice(dev.mac,dev.joinOpen,dev.token);
  res.end(JSON.stringify({success:true}));
});


/*************************************************
 * 网络管理
 ************************************************/


// 获取本机配置
app.get('/devInfo', function (req, res) {
  res.end(JSON.stringify({
    ip:devUtil.getIp(),
    mac:devUtil.getMac()
  }));
});
// 获取wifi信息
app.get("/wifiInfo",async function(req,res){
  var ret = await wifiUtil.info();
  res.end(JSON.stringify(ret));
});
// 获取wifi状态
app.get("/wifiStatus",async function(req,res){
  var ret = await wifiUtil.wifiConfig();
  res.end(JSON.stringify(ret));
});
// 设置wifi
app.post('/wifiSet',bodyParser.text(),async function(req,res){
  var info = req.body;//JSON.parse();
  var ret = await wifiUtil.set(info.ssid,info.psk);
  res.end(JSON.stringify({success:ret}));
});
// 重启网络
app.get("/wifiRestart",async function(req,res){
  exec("sudo killall wpa_supplicant ", function (err, stdout, stderr) {
      exec("sudo /etc/init.d/networking restart", function (err1, stdout1, stderr1) {
          if (err1) {
              console.error(err1)
              res.end(JSON.stringify({success:false}));
              return;
          }
          res.end(JSON.stringify({success:true}));
      });
  });
});

/*************************************************
 * 设备管理
 ************************************************/
// 重启设备
app.get("/reboot",function(req,res){
  exec("sudo reboot", function (err, stdout, stderr) {});
  res.end(JSON.stringify({}));
});

// 重启homebridge
app.get('/rebootHB', function (req, res) {
  var isStop = false;
  exec("ps aux | grep homebridge", function (err, stdout, stderr) {
      if (err) {
        console.error(err)
        res.end(JSON.stringify({error:99999}));
        return;
      }
      stdout.split('\n').filter((line) => {
      if(isStop)return; // 已经关闭过了
      let isForever = false;
        let processMessage = line.trim().split(/\s+/)
        for(let idx in processMessage){
          let processName = processMessage[idx];
          if(processName.indexOf('forever') > -1){
              isForever = true;
          }else if (processName === 'homebridge') {
              if(isForever){continue;}
               process.kill(processMessage[1]);
               res.end("{}");
               isStop = true;
               return;
            }
        }
        
        
      })
    })
})
// 删除缓存
app.get("/delCache",function(req,res){
  emptyDir(path.join(homebridgePath,"persist"));
  emptyDir(path.join(homebridgePath,"plugin-persist"));
  res.end(JSON.stringify({success:true}));
});

// 查询网桥协议代码
app.get("/qrcode",function(req,res){
  var command = "cat `forever logs | awk '{if ($3~/homebridge/) print $4;else print \"nolog\"}'|sed -r \"s/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]\/\/g\"` |grep X-HM| tail -n 1";
  exec(command, function (err, stdout, stderr) {
      if (err) {
          // console.error(err);
          res.end(JSON.stringify({error:99999}));
          return;
      }
      if(stdout){
          // console.log("qrcode:" + stdout);
          res.end(JSON.stringify({code:stdout.trim()}));
      }else{
          // console.error(err)
          res.end(JSON.stringify({error:99999}));
          return;
      }
  });
})

// 查询运行状态
app.get("/runstatus",function(req,res){
  var status = false;
  var pid = -1;
  var data = fs.readFileSync(hbConfigPath); // read
  var hbconfig = JSON.parse(data);
  var pinCode = hbconfig.bridge.pin;

  exec("ps aux", function (err, stdout, stderr) {
      if (err) {
        console.error(err)
        res.end(JSON.stringify({pinCode:pinCode,status:status}));
        return;
      }
      stdout.split('\n').filter((line) => {
        let processMessage = line.trim().split(/\s+/)
        for(let idx in processMessage){
          let processName = processMessage[idx];
          if (processName === 'homebridge') {
              status = true;
              pid = processMessage[1];
            }
        }
      })
      res.end(JSON.stringify({status:status,pid:pid,pinCode:pinCode}));
    });
})

// 开启远程协助
app.get("/remoteHelp",function(req,res){
  exec("/home/pi/mivis/bin/startFrpc",function(){
    res.end(JSON.stringify({success:true}));
  });
  res.end(JSON.stringify({success:true}));
});


// 删除缓存
function emptyDir(fileUrl){   
  if(!fs.existsSync(fileUrl))return;
  var files = fs.readdirSync(fileUrl);//读取该文件夹
  files.forEach(function(file){
    var stats = fs.statSync(fileUrl+'/'+file);
    if(stats.isDirectory()){
      emptyDir(fileUrl+'/'+file);
    }else{
      fs.unlinkSync(fileUrl+'/'+file); 
    }        
  });   
}


// 获取空调品牌列表
app.post('/groupBrand',bodyParser.text(),async function(req,res){
  var info = req.body;//JSON.parse();
  HttpUtils.postFormJson(ServerURL+"/groupBrand", info, function (result) {
      if(result.success && result.msg._RetCode == '00000'){
          res.end(JSON.stringify(result.msg));
      }else{
          res.end(JSON.stringify({error:result.msg._RetMsg}));
      }
  
    });
});

// 获取品牌下的模板
app.post('/findBrand',bodyParser.text(),async function(req,res){
  var info = req.body;//JSON.parse();
  HttpUtils.postFormJson(ServerURL+"/findBrand", info, function (result) {
      if(result.success && result.msg._RetCode == '00000'){
          res.end(JSON.stringify(result.msg));
      }else{
          res.end(JSON.stringify({error:result.msg._RetMsg}));
      }
      
    });
});

// 发送
app.post('/BLSendData',bodyParser.text(),async function(req,res){
  var host = req.body;//JSON.parse();
  if(!host){
      res.end(JSON.stringify({error:99999}));
      return;
  }
  var code = BLSendData(toMacStandard(host.mac),host.data);
  res.end(JSON.stringify({hex:code}));
});

function BLSendData(mac,hexData){
  mac = standMac(mac);
  var dev = broadlinkDM.getDevice(mac); // 获取mac对应的dev
    if(dev){ // send data
      const hexDataBuffer = new Buffer(hexData, 'hex');
      dev.sendData(hexDataBuffer);
    }else{
      console.log('cannot get dev of ' + mac);
    }
}

// 手动添加rm
app.post('/broadlinkAdd',bodyParser.text(),async function(req,res){
  var gw = req.body;//JSON.parse();
  var config = mivisStorage.getItem(mivisBroadlinkKey) || {};
  var  addedDevice = config.addedDevice;
  if(!addedDevice){
    addedDevice = config.addedDevice = {};
  }
  gw.store = true;
  addedDevice[gw.mac] = gw;
  mivisStorage.setItemSync(mivisBroadlinkKey, config);
  res.end(JSON.stringify({success:true}));
});

// 修改rm
// {mac:xxx,token:xxx,type:gw}
app.post('/broadlinkUpdate',bodyParser.text(),async function(req,res){
  var gw = req.body;//JSON.parse();
  var config = mivisStorage.getItem(mivisBroadlinkKey) || {};
  var  addedDevice = config.addedDevice;
  if(!addedDevice){
    addedDevice = config.addedDevice = {};
  }
  if(!addedDevice[gw.mac]){
    addedDevice[gw.mac] = gw;
  }else{
    addedDevice[gw.mac].data = gw.data;
    addedDevice[gw.mac].acBrand = gw.acBrand;
    addedDevice[gw.mac].acBrandSeq = gw.acBrandSeq;
  }
  addedDevice[gw.mac].store = true;
  mivisStorage.setItemSync(mivisBroadlinkKey, config);
  res.end(JSON.stringify({success:true}));
});

// 删除网关
// in:{mac:xxx,token:xxx,type:gw}
app.post('/broadlinkRemove',bodyParser.text(),async function(req,res){
  var gw = req.body;//JSON.parse();
  var config = mivisStorage.getItem(mivisBroadlinkKey) || {};
  var  addedDevice = config.addedDevice || {};
  delete addedDevice[gw.mac];
  mivisStorage.setItemSync(mivisBroadlinkKey, config);
  res.end(JSON.stringify({success:true}));
});


 // 添加到config文件
 // in: {"rm":[{mac:'m1',data:'t1'},{mac:'m2',data:'t2'}]}
 // out:
 app.post('/blSave2Hb',bodyParser.text(),async function(req,res){
  var input = req.body;//JSON.parse();
  var in_rm = input.rm;
  if(in_rm){
    var data = fs.readFileSync(hbConfigPath); // read
    var hbconfig = JSON.parse(data);
    var plats = hbconfig.platforms; // 所有的platform
    var newPlats = []; // 新的platform
    for(var index in plats){
      if(plats[index].platform != 'BroadlinkRM'){
        newPlats.push(plats[index]);
      }
    }
    // 
    for(var in_index in in_rm){ // 把rm的加进去
      var rm = in_rm[in_index];
      newPlats.push({
        "platform": "BroadlinkRM",
        "name": "RM-"+rm.mac,
        "host": standMac(rm.mac),
        "hideScanFrequencyButton": true,
        "hideLearnButton": true,
        "accessories": [
          {
            "type": "air-conditioner",
            "name": "空调-"+rm.mac,
            "host": standMac(rm.mac),
            "data": rm.data
          },
          {
            "type":"switch",
            "name": "空调",
            "host": standMac(rm.mac),
            "data":{
              "on": rm.data.auto.temperature25,
              "off":rm.data.off
            }
          }
        ]
      });
    }
    hbconfig.platforms = newPlats;
    fs.writeFileSync(hbConfigPath,JSON.stringify(hbconfig));
  }
  res.end(JSON.stringify({success:true}));
});


app.get('/shairplay', function (req, res) {
  var exist = fs.existsSync(shairplay_path);
  if(exist){
    fs.unlinkSync(shairplay_path);
  }else{
    fs.writeFileSync(shairplay_path,"end");
  }
  res.end(JSON.stringify({success:true,exist:exist}));
});

app.get('/getShairplay', function (req, res) {
  var exist = fs.existsSync(shairplay_path);
  res.end(JSON.stringify({success:true,exist:exist}));
});



function standMac(mac){
  if(mac.length == 17){ // 11:22:33:44:55:66
    return mac;
  }
  let ret = "";
  var t = mac.toString('hex');
  t = t.split("");
  for(let i in t){
      ret += t[i] ;
      ret += (i%2==1)?":":"";
  }
  return ret.substring(0,17);
}

module.exports = function() {
    var server = app.listen(9981, function () {
    var host = "0.0.0.0";//server.address().address
    var port = server.address().port
    console.log("应用实例，访问地址为 http://%s:%s", host, port);
  })
}